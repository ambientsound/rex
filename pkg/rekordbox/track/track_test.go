package track_test

import (
	`testing`

	`github.com/ambientsound/rex/pkg/rekordbox/track`
	`github.com/stretchr/testify/assert`
)

func TestTrack_MarshalBinary(t *testing.T) {
	track := track.Track{
		Header: track.Header{
			IndexShift:  0x100,
			Bitmask:     0xC0700,
			SampleRate:  44100,
			FileSize:    42399665,
			ArtworkId:   15,
			KeyId:       8,
			LabelId:     2,
			TrackNumber: 3,
			Tempo:       13300,
			GenreId:     1,
			AlbumId:     15,
			ArtistId:    2,
			Id:          16,
			Year:        2016,
			SampleDepth: 16,
			Duration:    362,
		},
		AnalyzeDate:     "2022-07-27",
		DateAdded:       "2022-07-27",
		Isrc:            "GBJX38209003",
		Filename:        "Dax J - Wir Leben Fur Die Nacht.flac",
		Title:           "Wir Leben FÃ¼r Die Nacht",
		AutoloadHotcues: "ON",
		FilePath:        "/meteor/techno/Dax J - Wir Leben Fur Die Nacht.flac",
		AnalyzePath:     "/PIONEER/USBANLZ/P03A/0000339E/ANLZ0000.DAT",
	}

	data, err := track.MarshalBinary()

	assert.NoError(t, err)

	expected := []byte{
		0x24, 0x00, 0x00, 0x01, 0x00, 0x07, 0x0c, 0x00, 0x44, 0xac, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xb1, 0xf7, 0x86, 0x02, 0x22, 0x86, 0xf3, 0x0e,
		0xeb, 0xb8, 0x5b, 0x57, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf4, 0x33, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x10, 0x00,
		0x6a, 0x01, 0x29, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x88, 0x00,
		0x9a, 0x00, 0x9b, 0x00, 0x9d, 0x00, 0x9f, 0x00, 0xa0, 0x00, 0xa1, 0x00,
		0xa2, 0x00, 0xa5, 0x00, 0xa6, 0x00, 0xa7, 0x00, 0xb2, 0x00, 0xb3, 0x00,
		0xb4, 0x00, 0xb5, 0x00, 0xe1, 0x00, 0xec, 0x00, 0xf0, 0x00, 0x22, 0x01,
		0x23, 0x01, 0x48, 0x01, 0x90, 0x12, 0x00, 0x00, 0x03, 0x47, 0x42, 0x4a,
		0x58, 0x33, 0x38, 0x32, 0x30, 0x39, 0x30, 0x30, 0x33, 0x00, 0x03, 0x05,
		0x32, 0x05, 0x32, 0x03, 0x03, 0x03, 0x07, 0x4f, 0x4e, 0x03, 0x03, 0x17,
		0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x37, 0x2d, 0x32, 0x37, 0x03, 0x03,
		0x03, 0x59, 0x2f, 0x50, 0x49, 0x4f, 0x4e, 0x45, 0x45, 0x52, 0x2f, 0x55,
		0x53, 0x42, 0x41, 0x4e, 0x4c, 0x5a, 0x2f, 0x50, 0x30, 0x33, 0x41, 0x2f,
		0x30, 0x30, 0x30, 0x30, 0x33, 0x33, 0x39, 0x45, 0x2f, 0x41, 0x4e, 0x4c,
		0x5a, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x44, 0x41, 0x54, 0x17, 0x32, 0x30,
		0x32, 0x32, 0x2d, 0x30, 0x37, 0x2d, 0x32, 0x37, 0x03, 0x00, 0x00, 0x00,
		0x90, 0x32, 0x00, 0x00, 0x57, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00,
		0x4c, 0x00, 0x65, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x20, 0x00,
		0x46, 0x00, 0xfc, 0x00, 0x72, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00,
		0x65, 0x00, 0x20, 0x00, 0x4e, 0x00, 0x61, 0x00, 0x63, 0x00, 0x68, 0x00,
		0x74, 0x00, 0x03, 0x4b, 0x44, 0x61, 0x78, 0x20, 0x4a, 0x20, 0x2d, 0x20,
		0x57, 0x69, 0x72, 0x20, 0x4c, 0x65, 0x62, 0x65, 0x6e, 0x20, 0x46, 0x75,
		0x72, 0x20, 0x44, 0x69, 0x65, 0x20, 0x4e, 0x61, 0x63, 0x68, 0x74, 0x2e,
		0x66, 0x6c, 0x61, 0x63, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x6f, 0x72,
		0x2f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x2f, 0x44, 0x61, 0x78, 0x20,
		0x4a, 0x20, 0x2d, 0x20, 0x57, 0x69, 0x72, 0x20, 0x4c, 0x65, 0x62, 0x65,
		0x6e, 0x20, 0x46, 0x75, 0x72, 0x20, 0x44, 0x69, 0x65, 0x20, 0x4e, 0x61,
		0x63, 0x68, 0x74, 0x2e, 0x66, 0x6c, 0x61, 0x63,
	}

	// assert.Equal(t, []byte{}, data)
	assert.Equal(t, expected, data)

	// os.WriteFile("/tmp/track_test.raw", data, 0644)
}
